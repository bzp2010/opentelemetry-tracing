receivers:
  otlp:
    protocols:
      # For apps
      grpc:
        endpoint: 0.0.0.0:4317
      # For Apache APISIX
      http:
        endpoint: 0.0.0.0:4318
  prometheus:
    config:
      scrape_configs:
        - job_name: mimir
          static_configs:
            - targets: [ mimir:9009 ]
              labels:
                service: mimir
                group: infrastructure
        - job_name: loki
          static_configs:
            - targets: [ loki:3100 ]
              labels:
                service: loki
                group: infrastructure
        - job_name: tempo
          static_configs:
            - targets: [ tempo:3200 ]
              labels:
                service: tempo
                group: infrastructure
        - job_name: grafana
          static_configs:
            - targets: [ grafana:3000 ]
              labels:
                service: grafana
                group: infrastructure
        - job_name: apisix
          metrics_path: /apisix/prometheus/metrics
          static_configs:
            - targets: [ apisix:9091 ]
              labels:
                service: APISIX
                group: app
processors:
  batch: ~
  # The spanmetrics processor is used to output metrics based on received trace spans.
  #spanmetrics:
  #    # Defines which exporter the processor will write metrics to.
  #    metrics_exporter: prometheusremotewrite
  #    # Defines additional label dimensions of the metrics from trace span attributes present.
  #    dimensions:
  #      - name: http.method
  #      - name: http.target
  #      - name: http.status_code
  #      - name: service.version

  ## The servicegraph processor is used to output service node metrics based on received trace spans.
  #servicegraph:
  #    # Defines which exporter the processor will write metrics to.
  #    metrics_exporter: prometheusremotewrite
  #    # Defines additional label dimensions of the metrics from trace span attributes present.
  #    store:                      # Configuration for the in-memory store.
  #      ttl: 2s                   # Time to wait for an edge to be completed.
  #      max_items: 200            # Number of edges that will be stored in the storeMap.
  #    cache_loop: 2m              # The timeout used to clean the cache periodically.
  #    store_expiration_loop: 10s  # The timeout used to expire old entries from the store periodically.
  #    # Virtual node peer attributes allow server nodes to be generated where instrumentation isn't present (eg. where
  #    # service client calls remotely to a service that does not include instrumentation).
  #    # Service nodes/edges will be generated for any attribute defined.
  #    virtual_node_peer_attributes:
  #      - db.name

# Define exporters to data stores.
# See https://opentelemetry.io/docs/collector/configuration/#exporters
# Also see https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor#recommended-processors
exporters:
  otlp/grafana:
    endpoint: tempo:4317
    tls:
      insecure: true
  prometheusremotewrite:
    endpoint: http://mimir:9009/api/v1/push
    tls:
      insecure: true
  logging:
    loglevel: debug
  loki:
    endpoint: http://loki:3100/loki/api/v1/push

service:
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ otlp/grafana ]
    metrics:
      receivers: [ prometheus ]
      processors: [ batch ]
      exporters: [ prometheusremotewrite ]
    logs:
      receivers: [ otlp ]
      exporters: [ logging, loki ]
